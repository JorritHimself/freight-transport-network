import math


class RollingMaterial():

    """Represents the entire park of one type of rolling material (wagon
       or locomotive).

       Keep track of service-hours required to the park and can give the amount
       of park needed to meet the requirement."""

    NF = "{:,.1f}"

    def __init__(self):

        # running time (hours * units)
        self.running = 0

        # idle time (hours * units)
        self.idle_heads = 0
        self.idle_turnout = 0
        self.idle_regroup = 0

        # idle capacity (ton)
        self.idle_capacity = 0

        # regroup saved time (hours * units)
        self.saved_idle_turnout = 0
        self.saved_running = 0

        # parameters (they are set up from RailNetwork class, could be  alse
        # more directly taken from Parametrs...)
        self.minimum_units = 104
        self.speed = 40  # (km/h)
        self.availability = 6570  # (hr/year)
        self.capacity = 2400  # (ton)
        self.head_stops_time = 15  # (hr/head_stop)
        self.turnout_time = 2  # (hr/turnout_stop)
        self.turnout_freq = 200  # (km between turnouts)
        self.regroup_time = 6

    def __repr__(self):

        rep = "\nTotal time: " + self.NF.format(self.get_total_time()) + \
              "\nRunning time: " + self.NF.format(self.get_running_time()) + \
              "\nIdle time: " + self.NF.format(self.get_idle_time()) + \
              "\nSaved time: " + self.NF.format(self.get_saved_time()) + \
              "\nUnits needed: " + self.NF.format(self.get_units_needed_by_time()) + \
              "\nAnual average haul: " + \
            self.NF.format(self.get_average_haul())

        return rep

    # PUBLIC

    # SET methods
    def set_speed(self, speed):
        """Set the running speed of a unit of rolling material."""
        self.speed = speed

    def set_availability(self, availability):
        """Set the yearly hours availability of a unit of rolling material."""
        self.availability = availability

    def set_capacity(self, capacity):
        """Set the amount of tons that a unit of rolling material can carry."""
        self.capacity = capacity

    # GET methods
    def get_running_time(self):
        return self.running

    def get_idle_time(self):
        return self.idle_heads + self.idle_turnout + self.idle_regroup

    def get_saved_time(self):
        return self.saved_idle_turnout + self.saved_running

    def get_total_time(self):
        return self.get_idle_time() + self.get_running_time()

    def get_idle_turnout_time(self):
        return self.idle_turnout

    def get_idle_regroup_time(self):
        return self.idle_regroup

    def get_operation_time(self):
        """Operation time is time rolling material is running or in turnout."""
        return (self.get_running_time() + self.get_idle_turnout_time() +
                self.get_idle_regroup_time())

    def get_units_needed_by_time(self):
        units_float = float(self.get_total_time()) / float(self.availability)
        return int(math.ceil(units_float))

    def get_average_haul(self):

        # calculate units of rolling material needed
        units_needed = self.get_units_needed_by_time()

        # check if units needed gretar than zero
        if units_needed > 0:
            average_haul = float(self.get_running_time()) / \
                units_needed * self.speed
        else:
            average_haul = 0

        return average_haul

    # MAIN methods
    def add_freight_service(self, ton, distance):
        """Increase the service requirements of rolling material for a service.

        Takes ton and distances of the new service and calculates hours * unit
        needed to do it, storing them in the object data. Additionally returns
        idle_capacity generated by the use of rolling material below limit."""

        # calculate hours to complete the service
        hours_running = self._get_hours_running(distance, self.speed)
        hours_idle_heads = self._get_hours_stop_heads()
        hours_idle_turnouts = self._get_hours_stop_turnouts(distance)

        # calculate units of rolling material needed to complete service
        units_needed = self._get_units_needed_by_weight(ton)

        # increase total hours * units of the park, due to this service
        self.running += hours_running * units_needed
        self.idle_heads += hours_idle_heads * units_needed
        self.idle_turnout += hours_idle_turnouts * units_needed

        # calculate idle extra capacity provided by rolling material needed
        idle_capacity = self._get_idle_capacity(ton, units_needed)
        self.idle_capacity += idle_capacity * distance

        return idle_capacity

    def regroup(self, num_units, distance):
        """Eliminate num_units from object due to regrouping."""

        # calculate hours to run through the link
        hours_running = self._get_hours_running(distance, self.speed)
        hours_idle_turnouts = self._get_hours_stop_turnouts(distance)

        # decrement total hours * units of the park, due to this regrouping
        self.running -= hours_running * num_units
        self.idle_turnout -= hours_idle_turnouts * num_units

        # store saved time
        self.saved_running += hours_running * num_units
        self.saved_idle_turnout += hours_idle_turnouts * num_units

        # update the idle capacity
        self.idle_capacity -= num_units * self.capacity * distance

        # calculate time consumed by regrouping
        self.idle_regroup += num_units * self.regroup_time

    def add_regroup_time(self, num_units):
        self.idle_regroup += num_units * self.regroup_time

    def subtract_regroup_time(self, num_units):
        self.idle_regroup -= num_units * self.regroup_time

    def revert_regroup(self, num_units, distance):
        """Restore num_units to object due to previous regrouping."""

        # calculate hours to run through the link
        hours_running = self._get_hours_running(distance, self.speed)
        hours_idle_turnouts = self._get_hours_stop_turnouts(distance)

        # decrement total hours * units of the park, due to this regrouping
        self.running += hours_running * num_units
        self.idle_turnout += hours_idle_turnouts * num_units

        # store saved time
        self.saved_running -= hours_running * num_units
        self.saved_idle_turnout -= hours_idle_turnouts * num_units

        # update the idle capacity
        self.idle_capacity += num_units * self.capacity * distance

        # calculate time consumed by regrouping
        self.idle_regroup -= num_units * self.regroup_time

    def print_report(self):

        print ""
        print "TIMES".center(20, "*")
        print "Total time (units-hr): " + self.NF.format(self.get_total_time())
        print "Running time (units-hr): " + self.NF.format(self.get_running_time())
        print "Idle time (units-hr): " + self.NF.format(self.get_idle_time())
        print "Saved time (units-hr): " + self.NF.format(self.get_saved_time())
        print "Idle heads time (units-hr): " + self.NF.format(self.idle_heads)
        print "Idle turnout time (units-hr): " + self.NF.format(self.idle_turnout)
        print "Idle regroup time (units-hr): " + self.NF.format(self.idle_regroup)
        print ""

        print "OTHER".center(20, "*")
        print "Units needed (units): " + self.NF.format(self.get_units_needed_by_time())
        print "Anual average haul (km): " + self.NF.format(self.get_average_haul())
        print ""
        
        print "IDLE CAPACITY".center(20, "*")
        print "Idle capacity (ton): " + self.NF.format(self.idle_capacity)
        print ""

        print "SAVED TIMES".center(20, "*")
        print "Idle turnout saved time (units-hr): " + self.NF.format(self.saved_idle_turnout)
        print "Running saved time (units-hr): " + self.NF.format(self.saved_running)
        print ""

    def report_to_excel(self, wb, ws_name):

        # create ws
        ws = wb.create_sheet()
        ws.title = ws_name

        # iterate through data memebers, copying the values
        data_members = self._get_data_members_list()
        for data_member in data_members:
            ws.append([data_member[0], data_member[1]])

        # copy function calls
        ws.append(["get_units_needed_by_time",
                   self.get_units_needed_by_time()])
        ws.append(["get_average_haul",
                   self.get_average_haul()])

    # PRIVATE
    def _get_data_members_list(self):
        return [(attr, value) for attr, value in self.__dict__.iteritems()]

    def _get_hours_running(self, distance, speed):
        return float(distance) / float(self.speed)

    def _get_hours_stop_heads(self):
        return self.head_stops_time * 2

    def _get_hours_stop_turnouts(self, distance):
        return float(distance) / float(self.turnout_freq) * self.turnout_time

    def _get_units_needed_by_weight(self, ton):
        units_by_weight = int(math.ceil(float(ton) / float(self.capacity)))
        return max(units_by_weight, self.minimum_units)

    def _get_idle_capacity(self, ton, units_needed):
        return units_needed * self.capacity - ton


def test():

    rm = RollingMaterial()

    print "\n\n\n---add freight service---"
    rm.add_freight_service(7286620, 500)
    rm.print_report()

    print "\n\n\n---use regroup method---"
    rm.regroup(1000, 1000)
    rm.print_report()

    print "\n\n\n---revert regroup---"
    rm.revert_regroup(1000, 1000)
    rm.print_report()

if __name__ == '__main__':
    test()
